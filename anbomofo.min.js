(function(){var a=angular.module("autoModals",[]);a.directive("modal",function(){return{restrict:"A",scope:{ngService:"@",ngModel:"="},controller:["$scope","$attrs","$injector","$modal",function(d,c,f,e){d.dataServiceName=c.ngService;d.dataService=f.get(d.dataServiceName);d.openModal=function(){function g(){e.open({template:'<div class="modal-header">     <div class="row">         <div class="col-lg-9">             <h3 class="modal-title">{{title}}</h3>         </div>         <div class="col-lg-3">             <h5 class="pull-right"><strong class="text-info">BLUE</strong> means required</h5>         </div>     </div> </div>  <div class="modal-body">       <form>         <!--Loop over all fields in the data model-->         <div class="form-group" ng-class="{\'has-error\' : !field.valid}" ng-repeat="field in fields"              ng-if="field.display">              <!--for boolean attributes-->             <input ng-if="field.type == \'checkbox\'" type="checkbox" ng-model="field.value">              <!--Field Label-->             <label ng-class="{\'text-info\' : field.required && field.valid, \'text-default\' : !field.required && field.valid , \'text-danger\': !field.valid}"                    for="{{field.name}}">{{field.displayName}} </label>              <!--Error message-->             <div ng-if="field.hasOwnProperty(\'errorMessage\')" class="alert alert-danger alert-dismissible fade in" role="alert">                 <strong>Error!</strong> {{field.errorMessage}}             </div>              <!--Create an input field for text and number attributes-->             <input ng-if="field.type == \'text\' || field.type == \'number\'" type="{{field.type}}" class="form-control"                    placeholder="{{field.placeholder}}" id="{{field.name}}" ng-model="field.value">              <!--Create a dropdown field for dropdown attributes using dropdownOptions attribute-->             <select class="form-control" ng-if="field.type == \'dropdown\'" data-ng-model="field.value" data-ng-options="item for item in field.dropdownOptions">             </select>              <!--for datetime picker-->             <input ng-if="field.type == \'datetime\'" class="form-control" type="datetime-local" ng-model="field.value">          </div>     </form> </div>  <!--modal footer--> <div class="modal-footer">     <button type="submit" class="btn btn-primary" ng-click="ok(fields)">OK</button>     <button type="button" class="btn btn-default" ng-click="cancel()">Cancel</button> </div>',controller:"AddModalInstanceController",size:"lg",resolve:{ngModel:function(){return d.ngModel},dataServiceName:function(){return d.dataServiceName}}})}if(typeof d.dataService.preClick==="function"){d.dataService.preClick()}function h(){setTimeout(function(){if(!d.ready){d.ready=d.dataService.modelReady();h()}else{g()}},100)}if(typeof d.dataService.modelReady==="function"){d.ready=d.dataService.modelReady();h()}else{g()}}}],link:function b(d,e,c,f){e.bind("click",function(g){d.openModal()})}}});a.controller("AddModalInstanceController",["$scope","$modalInstance","$http","$state","$injector","dataServiceName","ngModel","ModalService",function(k,f,g,b,j,i,d,c){var h=j.get(i);var e=h.getModel();k.fields=e.fields;if(d===undefined){k.settings=e.addModalSettings}else{k.settings=e.editModalSettings;k.fields=c.addValuesToFields(d,k.fields)}k.title=k.settings.title;k.cancel=function(){f.dismiss("cancel")};k.ok=function(l){var n=c.getValuesFromFields(l);var m=function(){k.fields=c.checkValidRequirements(k.fields);if(!c.checkValidFromFields(k.fields)){k.fields=l}else{if(k.settings.hasOwnProperty("callback")){k.settings.callback(n)}f.close()}};if("validate" in k.settings){k.fields=c.resetValidity(l);k.fields=k.settings.validate(k.fields);m()}else{k.fields=c.resetValidity(l);m()}};f.result.then(function(l){k.fields=c.resetModel(h.getModel())},function(l){k.fields=c.resetModel(h.getModel())})}]);a.service("ModalService",[function(){this.compileModel=function(d){var f=false;for(var c=0;c<d.fields.length;c++){var e=d.fields[c];if(e.type==="dropdown"&&!("dropdownOptions" in e)){console.error("MODAL ERROR: dropdown field ["+e[name]+"] must have dropdownOptions Array");f=true}if(!("name" in e)){console.error("MODAL ERROR: name field must exist in field ["+JSON.stringify(e)+"]");f=true}if(!("type" in e)&&e.display){console.error("MODAL ERROR: type field must exist in field ["+JSON.stringify(e)+"]");f=true}}if(f){console.error("Model compile error. Incorrectly formatted model.");return{}}else{return b(d)}};var b=function(d){var f={};for(var c=0;c<d.fields.length;c++){var e=d.fields[c];if(!("display" in e)){e.display=true}if(!("valid" in e)){e.valid=true}if(!("required" in e)){e.required=false}if(!("displayName" in e)){e.displayName=e.name}if(!("placeholder" in e)){e.placeholder="Please enter a value"}if(e.type==="dropdown"){if(!e.hasOwnProperty("value")){e.value=e.dropdownOptions[0]}}if(e.type==="checkbox"){if(!e.hasOwnProperty("value")){e.value=false}}if(e.type==="datetime"){if(!e.hasOwnProperty("value")){e.value=new Date()}}}return d};this.resetModel=function(d){for(var c=0;c<d.fields.length;c++){var e=d.fields[c];if(e.type==="dropdown"){e.value=e.dropdownOptions[0]}else{delete e.value}e.valid=true;delete e.errorMessage}return d};this.getValuesFromFields=function(d){var f={};for(var c=0;c<d.length;c++){var e=d[c];if("value" in e){f[e.name]=e.value}else{if(e.type==="checkbox"){f[e.name]=false}}}return f};this.checkValidFromFields=function(d){var e=true;for(var c=0;c<d.length;c++){var f=d[c];if(!f.valid){e=false}}return e};this.checkValidRequirements=function(d){for(var c=0;c<d.length;c++){var e=d[c];if("required" in e){if(e.required&&e.valid&&!("value" in e)){e.valid=false;e.errorMessage="This field is required"}}}return d};this.resetValidity=function(d){for(var c=0;c<d.length;c++){var e=d[c];e.valid=true;delete e.errorMessage}return d};this.addValuesToFields=function(e,d){for(var c=0;c<d.length;c++){var g=d[c];for(var f in e){if(e.hasOwnProperty(f)){if(g.name===f){g.value=e[f]}}}}return d}}])}());