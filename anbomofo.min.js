!function(){"use strict";var e=angular.module("autoModals",["ui.bootstrap","ui.router"]);e.directive("modal",function(){return{restrict:"A",scope:{ngService:"@",ngModel:"="},controller:["$scope","$attrs","$injector","$uibModal",function(e,i,t,l){e.dataServiceName=i.ngService,e.dataService=t.get(e.dataServiceName),e.openModal=function(){function i(){l.open({template:'<div class="modal-header">     <div class="row">         <div class="col-lg-9">             <h3 class="modal-title">{{title}}</h3>         </div>         <div class="col-lg-3">             <h5 class="pull-right"><strong class="text-info">BLUE</strong> means required</h5>         </div>     </div> </div>  <div class="modal-body">       <form>         <!--Loop over all fields in the data model-->         <div class="form-group" ng-class="{\'has-error\' : !field.valid}" ng-repeat="field in fields"              ng-if="field.display">              <!--for boolean attributes-->             <input ng-if="field.type == \'checkbox\'" type="checkbox" ng-model="field.value">              <!--Field Label-->             <label ng-class="{\'text-info\' : field.required && field.valid, \'text-default\' : !field.required && field.valid , \'text-danger\': !field.valid}"                    for="{{field.name}}">{{field.displayName}} </label>              <!--Error message-->             <div ng-if="field.hasOwnProperty(\'errorMessage\')" class="alert alert-danger alert-dismissible fade in" role="alert">                 <strong>Error!</strong> {{field.errorMessage}}             </div>              <!--Create an input field for text and number attributes-->             <input ng-if="field.type == \'text\' || field.type == \'number\'" type="{{field.type}}" class="form-control"                    placeholder="{{field.placeholder}}" id="{{field.name}}" ng-model="field.value">              <!--Create a dropdown field for dropdown attributes using dropdownOptions attribute-->             <select class="form-control" ng-if="field.type == \'dropdown\'" data-ng-model="field.value" data-ng-options="item for item in field.dropdownOptions">             </select>              <!--for datetime picker-->             <input ng-if="field.type == \'datetime\'" class="form-control" type="datetime-local" ng-model="field.value">          </div>     </form> </div>  <!--modal footer--> <div class="modal-footer">     <button type="submit" class="btn btn-primary" ng-click="ok(fields)">OK</button>     <button type="button" class="btn btn-default" ng-click="cancel()">Cancel</button> </div>',controller:"AddModalInstanceController",size:"lg",resolve:{ngModel:function(){return e.ngModel},dataServiceName:function(){return e.dataServiceName}}})}function t(){setTimeout(function(){e.ready?i():(e.ready=e.dataService.modelReady(),t())},100)}"function"==typeof e.dataService.preClick&&e.dataService.preClick(),"function"==typeof e.dataService.modelReady?(e.ready=e.dataService.modelReady(),t()):i()}}],link:function(e,i,t,l){i.bind("click",function(i){e.openModal()})}}}),e.controller("AddModalInstanceController",["$scope","$uibModalInstance","$http","$state","$injector","dataServiceName","ngModel","ModalService",function(e,i,t,l,r,d,a,o){var n=r.get(d),s=n.getModel();e.fields=s.fields,void 0===a?e.settings=s.addModalSettings:(e.settings=s.editModalSettings,e.fields=o.addValuesToFields(a,e.fields)),e.title=e.settings.title,e.cancel=function(){i.dismiss("cancel")},e.ok=function(t){var l=o.getValuesFromFields(t),r=function(){e.fields=o.checkValidRequirements(e.fields),o.checkValidFromFields(e.fields)?(e.settings.hasOwnProperty("callback")&&e.settings.callback(l),i.close()):e.fields=t};"validate"in e.settings?(e.fields=o.resetValidity(t),e.fields=e.settings.validate(e.fields),r()):(e.fields=o.resetValidity(t),r())},i.result.then(function(i){e.fields=o.resetModel(n.getModel())},function(i){e.fields=o.resetModel(n.getModel())})}]),e.service("ModalService",[function(){this.compileModel=function(i){for(var t=!1,l=0;l<i.fields.length;l++){var r=i.fields[l];"dropdown"!==r.type||"dropdownOptions"in r||(console.error("MODAL ERROR: dropdown field ["+r[name]+"] must have dropdownOptions Array"),t=!0),"name"in r||(console.error("MODAL ERROR: name field must exist in field ["+JSON.stringify(r)+"]"),t=!0),"type"in r||!r.display||(console.error("MODAL ERROR: type field must exist in field ["+JSON.stringify(r)+"]"),t=!0)}return t?(console.error("Model compile error. Incorrectly formatted model."),{}):e(i)};var e=function(e){for(var i=0;i<e.fields.length;i++){var t=e.fields[i];"display"in t||(t.display=!0),"valid"in t||(t.valid=!0),"required"in t||(t.required=!1),"displayName"in t||(t.displayName=t.name),"placeholder"in t||(t.placeholder="Please enter a value"),"dropdown"===t.type&&(t.hasOwnProperty("value")||(t.value=t.dropdownOptions[0])),"checkbox"===t.type&&(t.hasOwnProperty("value")||(t.value=!1)),"datetime"===t.type&&(t.hasOwnProperty("value")||(t.value=new Date))}return e};this.resetModel=function(e){for(var i=0;i<e.fields.length;i++){var t=e.fields[i];"dropdown"===t.type?t.value=t.dropdownOptions[0]:delete t.value,t.valid=!0,delete t.errorMessage}return e},this.getValuesFromFields=function(e){for(var i={},t=0;t<e.length;t++){var l=e[t];"value"in l?i[l.name]=l.value:"checkbox"===l.type&&(i[l.name]=!1)}return i},this.checkValidFromFields=function(e){for(var i=!0,t=0;t<e.length;t++){var l=e[t];l.valid||(i=!1)}return i},this.checkValidRequirements=function(e){for(var i=0;i<e.length;i++){var t=e[i];"required"in t&&(!t.required||!t.valid||"value"in t||(t.valid=!1,t.errorMessage="This field is required"))}return e},this.resetValidity=function(e){for(var i=0;i<e.length;i++){var t=e[i];t.valid=!0,delete t.errorMessage}return e},this.addValuesToFields=function(e,i){for(var t=0;t<i.length;t++){var l=i[t];for(var r in e)e.hasOwnProperty(r)&&l.name===r&&(l.value=e[r])}return i}}])}();